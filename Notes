* Add tx handling support for KeyWithinRange and KeyObjectRevision

***** FIX - Once serialization is done replace revision guard in crl.save_allocation_state call

* Add object allocation support

* Do integration tests w/ Frontend class directly
    - Send and receive messages in needed order to excercise code
    - Mock backend for checking Tx results

* Need Txd serialization/unserialization for load from saved state
    - Flatbuffers

* Add max_object_size() to DataStore backend, proxy call through Frontend
    - Allows easy size checking during req checks 
    - Size in pointer is for the client
    - Size should be available in the StoragePool object too

-----------------------------
* Need base transaction implementation
    - Will allow full integration test
    - Need to wait till all objects for Tx are loaded into memory

    * Represent as a separate struct
    * store maintains a hashmap of Tx instances
        - store owns the transaction

* Tx is enum of PreLoad and Loaded
    * Buffers content till loaded


* Tx receive Prepare, Accept, Accepted, Resolved, & Finalized messages
    - Accepted allows for peer-to-peer coms for reduced delay to noticing resolution

* Pre-transaction rebuilds come with Prepare

* Need Tx Resolution cache
    - check this before starting new transaction

* Need TxManager to be able to immediately respond to messages
    - Prepare/Accepts for known-complete transactions

* Need PrepareResponse/Promise cache
    - Used for when Promises arrive before we notice we're the designated leader

* For driving transactions, keep logic hidden behind a trait?
    - Object has an Option<dyn TransactionDriver>
    - Forwards all relevant messages to the TransactionDriver
    - Driver then can be told tx is complete rather than figure it out
    - Tx awaits TxFinalized message before dropping state

* Store thread periodically receives CheckTxTimeouts
    - Store iterates over all tx and calls dynamic trait's periodic_timeout_check()
    - Allows for pluggable solutions / separation of concerns

* Stores accept a TxDriverStrategy
    - On Tx creation and heartbeat, call strategy.dont_check_until() -> SystemTimestamp
    - If timestamp is exceeded during periodic check, call strategy.create_driver()
    - Also use strategy.create_driver() if this is the designated leader


------------

* Refamiliarize Scala Transaction implementation
   - Top to Bottom

* Add Tx management to Frontend

* Add CRL state load to Frontend
    - Loading Tx state and loading object state from disk are key
    - May want to do this with a completion handler rather than force all objects to be loaded
      synchronously
    - Should be able to read all objects in parallel. Backend model must support that
      anyway.
        - simplifies impl approach


TODO
----
    ** Need to check size of augmented KV object as part of Tx Locking.


Backlog / Ideas
---------------

Could use alternative store mechanism for in-memory objects. Similar to CRL, we stream to
disk an operation log when content is updated in memory. Only when we purge the object
from cache do we write back the value to the owning store.
   |-> very similar to kernel file cache
   |-> we'll just journal it so we can recover the cache state on startup
